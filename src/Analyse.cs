using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms; //imported for listViewItem
using System.IO; //file operations
using System.Security.Cryptography;
using System.Drawing; //md5

namespace AntiMalware
{
    public class Analyse
    {
        public void checkHash(String filename,  String hash)
        {
            Console.WriteLine("Checking - " + hash);
            // queries whois-style server belonging to "team cymru", containing common
            // malware md5 hashes
            String whoisInfo = Program.whois.GetWhoisInformation("hash.cymru.com", hash);
            if (whoisInfo.Contains("NO_DATA")) // response indicates no value in database
            {
                // not flagged as malware
                return;
            }
            //splits array into usable data
            String[] whoisArray = whoisInfo.Split(' ');
            threatsFound++;

            
            // uses invoke/delegate to access "MainInterface" thread and update 
            // the GUI whilst still processing the rest of the files
            Program.main.Invoke(new MethodInvoker(delegate
               {
                   //adds result to list
                   Program.main.getResultsList().Items.Add(
                       new ListViewItem(
                           new string[] { 
                            Path.GetFileName(filename), Path.GetFullPath(filename),
                            (int.Parse(whoisArray[2]) + "% - " + getThreatLevel(int.Parse(whoisArray[2])) )
                              }
                          ));
               }));
        }

        /**
         * Returns textual representation of a percentage
         * (Assuming threat is directly proportional to detection rate)
         * */
        private string getThreatLevel(int i)
        {
            return i > 75 ? "Severe" : i > 50 ? "High" : i > 33 ? "Moderate" : "Low";
        }

        /** returns md5 hash of file (path + name) **/
        public string computeHash(string fileName)
        {
            byte[] allBytes = File.ReadAllBytes(fileName);
            MD5 md5 = new MD5CryptoServiceProvider();
            return Program.misc.byteArrayToString(md5.ComputeHash(allBytes));
        }

        public void scanDirectory(string path)
        {
            resetScan();
            pathsToScan = new List<string> { };
            collectFilesDirectory(path);
            toScan = pathsToScan.Count();

            Boolean canc = false;
            foreach(string file in pathsToScan.ToArray()){
                Program.main.Invoke(new MethodInvoker(delegate
                {
                    if (Program.main.cancelled)
                    {
                        Program.main.cancelled = false;
                        Program.main.getCB().Visible = false;
                        canc = true;
                    }
                }));
                if (canc)
                {
                    resetScan();
                    return;
                }
                else
                {
                    if (scanned < toScan)
                        scanned += 1;
                    checkHash(file, computeHash(file));
                    updateScanProgress();
                }
                
            }
        }

        public List<string> pathsToScan;

        public void collectFilesDirectory(string path)
        {
            try
            {
                foreach (string file in Directory.GetFiles(path))
                {
                    try
                    {
                        pathsToScan.Add(file);
                    }
                    catch (Exception e)
                    {
                        //prevents any issues adding file to array
                        //to-do, add error reporting here
                    }
                }
            }
            catch (Exception e)
            {
                //prevents any issues scanning file
                //to-do, add error reporting here
            }
            try
            {
                foreach (string directory in Directory.GetDirectories(path))
                {
                   collectFilesDirectory(directory);
                }
            }
            catch (Exception e)
            {
                //prevents any issues scanning file
                //to-do, add error reporting here
            }
        }

        private int toScan = 0;
        private int scanned = 0;
        private int threatsFound = 0;


        private void updateScanProgress()
        {
            int scanperc = (int)Math.Ceiling(((double)(scanned) / (double)toScan) * 100);

            Program.main.Invoke(new MethodInvoker(delegate
            {
                Program.main.getPerComp().Text = Convert.ToString(scanperc) + "% complete ";
                Program.main.getFileAm().Text = "Scanning file " + scanned + " of " + toScan;
                Program.main.getProg().Value = Convert.ToInt32(scanperc);
                Program.main.getThreats().Text = threatsFound + " threat"+
                    (threatsFound==1?"":"s") + " found";

                if (threatsFound > 0 && Program.main.getThreats().ForeColor != Color.Red)
                    Program.main.getThreats().ForeColor = Color.Red;
                else if (Program.main.getThreats().ForeColor != Color.Black && threatsFound == 0)
                    Program.main.getThreats().ForeColor = Color.Black;

                if (scanperc == 100 && Program.main.getRB().Enabled != true)
                {
                    Program.main.getRB().Enabled = true;
                    Program.main.getCB().Visible = false;
                }
                else if (Program.main.getRB().Enabled == true && scanperc != 100) {
                    Program.main.getRB().Enabled = false;
                    Program.main.getCB().Visible = true;
                }
            }));
        }

        /**
         * refreshes ready for another scan
         * */
        private void resetScan()
        {
            toScan = 0;
            scanned = 0;
            threatsFound = 0;
            Program.main.Invoke(new MethodInvoker(delegate
            {
                Program.main.getRB().Enabled = false;
                Program.main.getResultsList().Items.Clear();
            }));
        }


    }
}
